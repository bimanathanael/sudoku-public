{"ast":null,"code":"var encodeBoard = function encodeBoard(board) {\n  return board.reduce(function (result, row, i) {\n    return result + (\"%5B\" + encodeURIComponent(row) + \"%5D\" + (i === board.length - 1 ? '' : '%2C'));\n  }, '');\n};\n\nvar encodeParams = function encodeParams(params) {\n  return Object.keys(params).map(function (key) {\n    return key + '=' + (\"%5B\" + encodeBoard(params[key]) + \"%5D\");\n  }).join('&');\n};\n\nexport var getSudokuBoard = function getSudokuBoard() {\n  var difficulty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"easy\";\n  return function (dispact) {\n    fetch(\"https://sugoku.herokuapp.com/board?difficulty=\" + difficulty, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (data) {\n      return dispact({\n        type: 'SET_SUDOKU_BOARD',\n        payload: {\n          sudokuBoard: data.board\n        }\n      });\n    });\n  };\n};\nexport var validate = function validate(data) {\n  var dataSubmit = {\n    board: data\n  };\n  return function (dispact) {\n    fetch('https://sugoku.herokuapp.com/validate', {\n      method: \"POST\",\n      body: encodeParams(dataSubmit),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (data) {\n      dispact({\n        type: 'VALIDATE_BOARD',\n        payload: {\n          result: data\n        }\n      });\n    });\n  };\n};\nexport var giveUp = function giveUp(data) {\n  var dataSubmit = {\n    board: data\n  };\n  return function (dispact) {\n    fetch('https://sugoku.herokuapp.com/solve', {\n      method: 'POST',\n      body: encodeParams(dataSubmit),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      return dispact({\n        type: 'SET_VALID_BOARD',\n        payload: {\n          result: response.solution\n        }\n      });\n    }).catch(console.warn);\n  };\n};","map":{"version":3,"sources":["/home/bimanathan/Documents/HACKTIV8/3-phase/2-week/1-day/sugoku/store/actions/sudokuActions.js"],"names":["encodeBoard","board","reduce","result","row","i","encodeURIComponent","length","encodeParams","params","Object","keys","map","key","join","getSudokuBoard","difficulty","dispact","fetch","method","headers","then","resp","json","data","type","payload","sudokuBoard","validate","dataSubmit","body","giveUp","response","solution","catch","console","warn"],"mappings":"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","sourcesContent":["const encodeBoard = (board) => board.reduce((result, row, i) => result + `%5B${encodeURIComponent(row)}%5D${i === board.length -1 ? '' : '%2C'}`, '')\n\nconst encodeParams = (params) => \n  Object.keys(params)\n  .map(key => key + '=' + `%5B${encodeBoard(params[key])}%5D`)\n  .join('&');\n\nexport const getSudokuBoard = (difficulty = \"easy\") => {\n  return (dispact) => {\n    fetch(`https://sugoku.herokuapp.com/board?difficulty=${difficulty}`, {\n      method: 'GET',\n      headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n      },\n    })\n      .then( resp => resp.json())\n      .then( data => \n        dispact({\n          type: 'SET_SUDOKU_BOARD',\n          payload: {\n            sudokuBoard: data.board\n          }\n        })\n      )\n  }\n}\n\nexport const validate = (data) => {\n  const dataSubmit = {\n    board: data\n  }\n  return (dispact) => {\n    fetch('https://sugoku.herokuapp.com/validate', {\n      method: \"POST\",\n      body: encodeParams(dataSubmit),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n        },\n    })\n      .then( resp => resp.json() )\n      .then( data => {\n        dispact({\n          type: 'VALIDATE_BOARD',\n          payload: {\n            result: data\n          }\n        })\n      }\n    )\n  }\n}\n\nexport const giveUp = (data) => {\n  const dataSubmit = {\n    board: data\n  }\n  return (dispact) => {\n    fetch('https://sugoku.herokuapp.com/solve', {\n      method: 'POST',\n      body: encodeParams(dataSubmit),\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n    })\n      .then(response => response.json())\n      .then(response => dispact({\n        type: 'SET_VALID_BOARD',\n        payload: {\n          result: response.solution\n        }\n      }))\n      .catch(console.warn)\n  }\n}"]},"metadata":{},"sourceType":"module"}